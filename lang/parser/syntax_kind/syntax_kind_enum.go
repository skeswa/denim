// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package syntaxkind

import (
	"fmt"
	"strings"
)

const (
	// Describes any kind of non-doc comment
	Comment SyntaxKind = iota
	// Root token for any file
	SourceFile
	// Describes any kind of whitespace (e.g. \n, \t, etc.)
	Whitespace
)

var ErrInvalidSyntaxKind = fmt.Errorf("not a valid SyntaxKind, try [%s]", strings.Join(_SyntaxKindNames, ", "))

const _SyntaxKindName = "commentsource_filewhitespace"

var _SyntaxKindNames = []string{
	_SyntaxKindName[0:7],
	_SyntaxKindName[7:18],
	_SyntaxKindName[18:28],
}

// SyntaxKindNames returns a list of possible string values of SyntaxKind.
func SyntaxKindNames() []string {
	tmp := make([]string, len(_SyntaxKindNames))
	copy(tmp, _SyntaxKindNames)
	return tmp
}

var _SyntaxKindMap = map[SyntaxKind]string{
	Comment:    _SyntaxKindName[0:7],
	SourceFile: _SyntaxKindName[7:18],
	Whitespace: _SyntaxKindName[18:28],
}

// String implements the Stringer interface.
func (x SyntaxKind) String() string {
	if str, ok := _SyntaxKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SyntaxKind(%d)", x)
}

var _SyntaxKindValue = map[string]SyntaxKind{
	_SyntaxKindName[0:7]:   Comment,
	_SyntaxKindName[7:18]:  SourceFile,
	_SyntaxKindName[18:28]: Whitespace,
}

// ParseSyntaxKind attempts to convert a string to a SyntaxKind.
func ParseSyntaxKind(name string) (SyntaxKind, error) {
	if x, ok := _SyntaxKindValue[name]; ok {
		return x, nil
	}
	return SyntaxKind(0), fmt.Errorf("%s is %w", name, ErrInvalidSyntaxKind)
}
