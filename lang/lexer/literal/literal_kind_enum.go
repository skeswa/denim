// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package literal

import (
	"fmt"
	"strings"
)

const (
	// Describes a floating point literal (e.g. `-12.80001`, `1.2e-12`).
	Float LiteralKind = iota
	// Describes an integer literal (e.g. `11`, `-0x120`, `1_000_000`).
	Int
	// Describes a "raw" text literal (e.g. `r"abc"#`, `r#"xyz"#`).
	RawString
	// Describes a character literal (e.g. `'a'`, `'ðŸ‘–'`).
	Rune
	// Describes a single or multi-line text literal (e.g. `"abc"`, `"""xyz"""`).
	String
)

var ErrInvalidLiteralKind = fmt.Errorf("not a valid LiteralKind, try [%s]", strings.Join(_LiteralKindNames, ", "))

const _LiteralKindName = "FloatIntRawStringRuneString"

var _LiteralKindNames = []string{
	_LiteralKindName[0:5],
	_LiteralKindName[5:8],
	_LiteralKindName[8:17],
	_LiteralKindName[17:21],
	_LiteralKindName[21:27],
}

// LiteralKindNames returns a list of possible string values of LiteralKind.
func LiteralKindNames() []string {
	tmp := make([]string, len(_LiteralKindNames))
	copy(tmp, _LiteralKindNames)
	return tmp
}

var _LiteralKindMap = map[LiteralKind]string{
	Float:     _LiteralKindName[0:5],
	Int:       _LiteralKindName[5:8],
	RawString: _LiteralKindName[8:17],
	Rune:      _LiteralKindName[17:21],
	String:    _LiteralKindName[21:27],
}

// String implements the Stringer interface.
func (x LiteralKind) String() string {
	if str, ok := _LiteralKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LiteralKind(%d)", x)
}

var _LiteralKindValue = map[string]LiteralKind{
	_LiteralKindName[0:5]:   Float,
	_LiteralKindName[5:8]:   Int,
	_LiteralKindName[8:17]:  RawString,
	_LiteralKindName[17:21]: Rune,
	_LiteralKindName[21:27]: String,
}

// ParseLiteralKind attempts to convert a string to a LiteralKind.
func ParseLiteralKind(name string) (LiteralKind, error) {
	if x, ok := _LiteralKindValue[name]; ok {
		return x, nil
	}
	return LiteralKind(0), fmt.Errorf("%s is %w", name, ErrInvalidLiteralKind)
}
