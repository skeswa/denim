package lexer

// Maps each kind of `T` to a short, human-friendly label.
var tokenToString = map[T]string{
	TEndOfFile:   "end of file",
	TSyntaxError: "syntax error",

	// Literals
	TDoubleLiteral: "double",
	TIntLiteral:    "int",
	TRuneLiteral:   "rune",
	TStringLiteral: "string",

	// Punctuation
	TAmpersand:          "\"&\"",
	TAmpersandAmpersand: "\"&&\"",
	TAsterisk:           "\"*\"",
	TAsteriskAsterisk:   "\"**\"",
	TAt:                 "\"@\"",
	TBar:                "\"|\"",
	TBarBar:             "\"||\"",
	TCloseBrace:         "\"}\"",
	TCloseBracket:       "\"]\"",
	TCloseParen:         "\")\"",
	TColon:              "\":\"",
	TComma:              "\",\"",
	TDot:                "\".\"",
	TDotDot:             "\"..\"",
	TDotDotDot:          "\"...\"",
	TEquals:             "\"=\"",
	TEqualsEquals:       "\"==\"",
	TEqualsGreaterThan:  "\"=>\"",
	TExclamation:        "\"!\"",
	TExclamationEquals:  "\"!=\"",
	TGreaterThan:        "\">\"",
	TGreaterThanEquals:  "\">=\"",
	TLessThan:           "\"<\"",
	TLessThanEquals:     "\"<=\"",
	TMinus:              "\"-\"",
	TMinusGreaterThan:   "\"->\"",
	TOpenBrace:          "\"{\"",
	TOpenBracket:        "\"[\"",
	TOpenParen:          "\"(\"",
	TPercent:            "\"%\"",
	TPlus:               "\"+\"",
	TQuestionDot:        "\"?.\"",
	TQuestionQuestion:   "\"??\"",
	TSemicolon:          "\";\"",
	TSlash:              "\"/\"",
	TTildeSlash:         "\"~\"",

	// Reserved words
	TAs:       "\"as\"",
	TAsync:    "\"async\"",
	TAwait:    "\"await\"",
	TBreak:    "\"break\"",
	TContinue: "\"continue\"",
	TElse:     "\"else\"",
	TEnum:     "\"enum\"",
	TExtern:   "\"extern\"",
	TFalse:    "\"false\"",
	TFn:       "\"fn\"",
	TFor:      "\"for\"",
	TFork:     "\"fork\"",
	TFrom:     "\"from\"",
	TIf:       "\"if\"",
	TImpl:     "\"impl\"",
	TIn:       "\"in\"",
	TIs:       "\"is\"",
	TLet:      "\"let\"",
	TLoop:     "\"loop\"",
	TMatch:    "\"match\"",
	TMod:      "\"mod\"",
	TPub:      "\"pub\"",
	TReturn:   "\"return\"",
	TSelf:     "\"self\"",
	TSelfType: "\"selftype\"",
	TShow:     "\"show\"",
	TStruct:   "\"struct\"",
	TTandem:   "\"tandem\"",
	TTrait:    "\"trait\"",
	TTrue:     "\"true\"",
	TTry:      "\"try\"",
	TType:     "\"type\"",
	TUnknown:  "\"unknown\"",
	TUse:      "\"use\"",
	TVoid:     "\"void\"",
	TWhere:    "\"where\"",
	TWhile:    "\"while\"",
}
