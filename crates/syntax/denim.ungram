// Denim Un-Grammar.
//
// This grammar specifies the structure of Denim's concrete syntax tree. It does
// not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound
// operators glued.
//
// This grammar is shamelessly forked from rust-lang/rust-analyzer's
// `rust.ungram`. Thanks matklad@ and friends!
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

//*************************//
//         Paths           //
//*************************//

Name =
  '#ident' | 'self'

NameRef =
  '#ident' | '@int_number' | 'self' | 'super' | 'crate' | 'Self'

Path =
  (qualifier:Path '::')? segment:PathSegment

PathSegment =
  '::'? NameRef
| NameRef GenericArgList?
| NameRef ParamList RetType?
| '<' Type ('as' PathType)? '>'


//*************************//
//        Generics         //
//*************************//

GenericArgList =
  '::'? '<' (GenericArg (',' GenericArg)* ','?)? '>'

GenericArg =
  TypeArg
| AssocTypeArg
| ConstArg

TypeArg =
  Type

AssocTypeArg =
  NameRef
  (GenericArgList | ParamList RetType?)?
  (':' TypeBoundList | ('=' Type | ConstArg))

ConstArg =
  Expr

GenericParamList =
  '<' (GenericParam (',' GenericParam)* ','?)? '>'

GenericParam =
  TypeParam

TypeParam =
  Attr* Name (':' TypeBoundList?)?
  ('=' default_type:Type)?

WhereClause =
  'where' predicates:(WherePred (',' WherePred)* ','?)

WherePred =
  ('for' GenericParamList)?  Type ':' TypeBoundList?

//*************************//
//          Items          //
//*************************//

SourceFile =
  Attr*
  Item*

Item =
  Enum
| Fn
| Impl
| Trait
| TypeAlias

ItemList =
  '{' Attr* Item* '}'

Rename =
  'as' (Name | '_')

Fn =
 Attr* Visibility?
 'fn' Name GenericParamList? ParamList RetType? WhereClause?
 (body:BlockExpr | ';')

ParamList =
  '('(
    SelfParam
  | (SelfParam ',')? (Param (',' Param)* ','?)?
  )')'
| '|' (Param (',' Param)* ','?)? '|'

SelfParam =
  Attr* 'mut'? Name

Param =
  Attr* (
    Pat (':' Type)?
  | Type
  | '...'
  )

RetType =
  '->' Type

TypeAlias =
  Attr* Visibility?
  'type' Name GenericParamList? (':' TypeBoundList?)? WhereClause?
  ('=' Type)? ';'

RecordFieldList =
 '{' fields:(RecordField (',' RecordField)* ','?)? '}'

RecordField =
  Attr* Name ':' Type

TupleFieldList =
  '(' fields:(TupleField (',' TupleField)* ','?)? ')'

TupleField =
  Attr* Visibility?
  Type

FieldList =
  RecordFieldList
| TupleFieldList

Enum =
  Attr* Visibility?
  'enum' Name GenericParamList? WhereClause?
  VariantList

VariantList =
 '{' (Variant (',' Variant)* ','?)? '}'

Variant =
  Attr* Visibility?
  Name FieldList? ('=' Expr)?

Trait =
  Attr* Visibility?
  'trait' Name GenericParamList?
  (':' TypeBoundList?)? WhereClause? AssocItemList

AssocItemList =
  '{' Attr* AssocItem* '}'

AssocItem =
  Fn

Impl =
  Attr* Visibility?
  'impl' GenericParamList? (trait:Type 'for')? self_ty:Type WhereClause?
  AssocItemList

Visibility =
  'pub'

//****************************//
// Statements and Expressions //
//****************************//

Stmt =
  ';'
| ExprStmt
| Item
| LetStmt

LetStmt =
  Attr* 'let' Pat (':' Type)?
  '=' initializer:Expr
  ';'

ExprStmt =
  Expr ';'?

Expr =
  AsyncExpr
| AwaitExpr
| BinExpr
| BlockExpr
| BreakExpr
| CallExpr
| CastExpr
| ClosureExpr
| ContinueExpr
| FieldExpr
| ForExpr
| FnRefExpr
| IfExpr
| IndexExpr
| ListExpr
| Literal
| LoopExpr
| MapExpr
| MatchExpr
| MethodCallExpr
| MutExpr
| NegExpr
| NotExpr
| ParenExpr
| PathExpr
| RangeExpr
| ReturnExpr
| SetExpr
| TryExpr
| TupleExpr
| WhileExpr
| LetExpr
| UnderscoreExpr

Literal =
  Attr* value:(
    '@int_number' | '@float_number'
  | '@string' | '@raw_string'
  | '@char' | '@byte'
  | 'true' | 'false'
  )

PathExpr =
  Attr* Path

StmtList =
  '{'
    Attr*
    statements:Stmt*
    tail_expr:Expr?
  '}'

TryExpr =
  Attr* Expr '.' 'try'

MutExpr =
  Attr* Expr '.' 'mut'

FnRefExpr =
  Attr* Expr '.' 'fn'

BlockExpr =
  Attr* Label? StmtList

NegExpr =
  Attr* '-' Expr

NotExpr =
  Attr* 'not' Expr
| Attr* Expr '.' 'not'

BinExpr =
  Attr*
  lhs:Expr
  op:(
    'or' | 'and'
  | '==' | '!=' | '===' | '!==' | '<=' | '<'
  | '+' | '*' | '-' | '/' | '%'
  | '='
  )
  rhs:Expr

CastExpr =
  Attr* Expr '.' 'as' '(' Type ')'

ParenExpr =
  Attr* '(' Attr* Expr ')'

ListExpr =
  Attr* '[' (ListEntry (',' ListEntry)* ','?) ']'

ListEntry =
  Attr* Expr
| '..' spread:Expr

MapExpr =
  Attr* '[' (MapEntry (',' MapEntry)* ','?) ']'

MapEntry =
  Attr* Expr ':' Expr
| '..' spread:Expr

SetExpr =
  Attr* '[' (SetEntry (',' SetEntry)* ','?) ']'

SetEntry =
  Attr* ':' Expr
| '..' spread:Expr

IndexExpr =
  Attr* base:Expr '[' index:Expr ']'

TupleExpr =
  Attr* '(' Attr* fields:(Expr (',' Expr)* ','?)? ')'

RecordExpr =
  RecordExprFieldList

RecordExprFieldList =
  '{'
    Attr*
    fields:(RecordExprField (',' RecordExprField)* ','?)?
    ('..' spread:Expr?)?
  '}'

RecordExprField =
  Attr* (NameRef ':')? Expr

CallExpr =
  Attr* Expr ArgList

ArgList =
  '(' args:(Expr (',' Expr)* ','?)? ')'

MethodCallExpr =
  Attr* receiver:Expr '.' NameRef GenericArgList? ArgList

FieldExpr =
  Attr* Expr '.' NameRef

ClosureExpr =
  Attr* ParamList RetType?
  body:Expr

IfExpr =
  Attr* (('if' condition:Expr) | (condition.Expr '.' 'if'))
  then_branch:BlockExpr
  ('else' else_branch:(IfExpr | BlockExpr))?

LoopExpr =
  Attr* Label? 'loop'
  loop_body:BlockExpr

ForExpr =
  Attr* Label? 'for' Pat 'in' iterable:Expr
  loop_body:BlockExpr

WhileExpr =
  Attr* Label? 'while' condition:Expr
  loop_body:BlockExpr

BreakExpr =
  Attr* 'break'

ContinueExpr =
  Attr* 'continue'

RangeExpr =
  Attr* start:Expr? op:('..' | '..=') end:Expr?

MatchExpr =
  Attr* 'match' Expr MatchArmList
| Attr* Expr '.' 'match' MatchArmList

MatchArmList =
  '{'
    Attr*
    arms:MatchArm*
  '}'

MatchArm =
  Attr* Pat guard:MatchGuard? '=>' Expr ','?

MatchGuard =
  'if' condition:Expr

ReturnExpr =
  Attr* 'return' Expr?

LetExpr =
  Attr* 'let' Pat '=' Expr

UnderscoreExpr =
  Attr* '_'

AsyncExpr =
  Attr* Expr '.' 'async'

AwaitExpr =
  Attr* Expr '.' 'await'

//*************************//
//          Types          //
//*************************//

Type =
  FnPtrType
| InferType
| ListType
| MapType
| MutType
| NeverType
| ParenType
| PathType
| RecordType 
| RefType
| SetType
| TupleType
| UnionType
| UnknownType

RecordType =
 '{' fields:(RecordTypeField (',' RecordTypeField)* ','?)? '}'

RecordTypeField =
  Attr* Name ':' Type

ParenType =
  '(' Type ')'

NeverType =
  'never'

UnknownType =
  'unknown'
| '*'

PathType =
  Path

TupleType =
  '(' fields:(Type (',' Type)* ','?)? ')'

MutType =
  'mut' Type

ListType =
  '[' Type ']'

MapType =
  '[' Type ':' Type ']'

SetType =
  '[' ':' Type ']'

SliceType =
  '[' Type ']'

InferType =
  '_'

FnPtrType =
  'fn' ParamList RetType?

UnionType =
  ('|'? Type ('|' Type)*)

TypeBoundList =
  bounds:(TypeBound ('+' TypeBound)* '+'?)

TypeBound =
  Type

//************************//
//        Patterns        //
//************************//

Pat =
  IdentPat
| AliasedTuplePat
| RestPat
| LiteralPat
| OrPat
| ParenPat
| PathPat
| WildcardPat
| RangePat
| RecordPat
| SlicePat
| TuplePat

LiteralPat =
  '-'? Literal

IdentPat =
  Attr* Name ('@' Pat)?

WildcardPat =
  '_'

RangePat =
  // 1..
  start:Pat op:('..' | '..=')
  // 1..2
  | start:Pat op:('..' | '..=') end:Pat
  // ..2
  | op:('..' | '..=') end:Pat

RecordPat =
  '{'
    fields:(RecordPatField (',' RecordPatField)* ','?)?
    RestPat?
  '}'

RecordPatField =
  Attr* (NameRef ':')? Pat

AliasedTuplePat =
   Path '(' fields:(Pat (',' Pat)* ','?)? ')'

TuplePat =
   '(' fields:(Pat (',' Pat)* ','?)? ')'

ParenPat =
  '(' Pat ')'

SlicePat =
  '[' (Pat (',' Pat)* ','?)? ']'

PathPat =
  Path

OrPat =
  (Pat ('|' Pat)* '|'?)

RestPat =
  Attr* '..'
